plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    alias libs.plugins.modDevGradle
    alias libs.plugins.spotless
    alias libs.plugins.lombok
}

group = maven_group
boolean isSnapshot = System.getenv("SNAPSHOT")
version = "${mod_version}" + (isSnapshot ? "-SNAPSHOT" : "")
boolean isCI = System.getenv("CI") != null

java {
    toolchain.languageVersion = JavaLanguageVersion.of(21)
}

sourceSets {
    main.resources {
        srcDir 'src/generated/resources'
    }

    client {
        compileClasspath += main.output
        runtimeClasspath += main.output + main.runtimeClasspath
    }

    test {
        compileClasspath += main.output
        runtimeClasspath += main.output + main.runtimeClasspath
    }

    extra {
        compileClasspath += main.output
        runtimeClasspath += main.output + main.runtimeClasspath
    }

    clientExtra {
        compileClasspath += client.output + extra.compileClasspath
        runtimeClasspath += client.output + client.runtimeClasspath + extra.runtimeClasspath
    }
}

configurations {
    library
    implementation.extendsFrom library
    // set these as unresolvable so we don't accidentally force all dependents to use them with us
    clientRuntimeOnly.canBeResolved = false
    extraRuntimeOnly.canBeResolved = false
    clientExtraRuntimeOnly.canBeResolved = false

    runtimeClasspath.extendsFrom localRuntime
    extraRuntimeClasspath.extendsFrom extraLocalRuntime
    clientRuntimeClasspath.extendsFrom clientLocalRuntime
    extraClientRuntimeClasspath.extendsFrom clientExtraLocalRuntime

    renderNurseCfg {
        canBeConsumed = false
    }
}

afterEvaluate {
    configurations {
        // same as above but for the modRuntimeOnly configurations
        modClientRuntimeOnly.canBeResolved = false
        modExtraRuntimeOnly.canBeResolved = false
        modClientExtraRuntimeOnly.canBeResolved = false
    }
}

obfuscation {
    createRemappingConfiguration(configurations.localRuntime)
    createRemappingConfiguration(configurations.clientLocalRuntime)

    createRemappingConfiguration(configurations.extraLocalRuntime)
    createRemappingConfiguration(configurations.clientExtraLocalRuntime)
}

apply from: "$rootDir/gradle/scripts/jars.gradle"
apply from: "$rootDir/gradle/scripts/moddevgradle.gradle"
apply from: "$rootDir/gradle/scripts/repositories.gradle"
apply from: "$rootDir/dependencies.gradle"
apply from: "$rootDir/gradle/scripts/resources.gradle"
apply from: "$rootDir/gradle/scripts/publishing.gradle"

generateModMetadata.doFirst {
    mkdir('run/server')
    mkdir('run/data')
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:-removal"
    options.compilerArgs << "-Aquiet=true"// 忽略删除和过时，真删了报错再说吧
}

lombok {
    version = "1.18.38"
}