String getConfig(String key) {
    return project.properties.get(key)
}

def mod_id = getConfig("mod_id")
def version = getConfig("version")
def mod_license = getConfig("mod_license")
def mod_name = getConfig("mod_name")
def mod_description = getConfig("mod_description")
def mod_url = getConfig("mod_url")
def mod_issue_tracker = getConfig("mod_issue_tracker")

String suffix = System.getenv("VERSION_SUFFIX")
String version_toml = "$version" + (suffix ? "+$suffix" : "")

tasks.register('printVersion') {
    doLast {
        println mod_version
    }
}

// Create run-folders for non-client configs to avoid pollution of dev envs
tasks.matching { it.name.startsWith('prepare') }.configureEach {
    doFirst {
        mkdir('run')
        mkdir('run/server')
        mkdir('run/gametest')
        mkdir('run/data')
    }
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var forgeVers = libs.versions.forge.get().split("\\.")[0]
    var replaceProperties = [
            version                 : version_toml,
            mod_id                  : mod_id,
            minecraft_version       : libs.versions.minecraft.get(),
            loader_version          : forgeVers,
            forge_version           : forgeVers,
            ldlib_version           : forge.versions.ldlib.get(),
            jei_version             : forge.versions.jei.get(),
            configuration_version   : forge.versions.configuration.get(),
            gtceu_version           : forge.versions.gtm.get(),
            jade_version            : forge.versions.jade.get(),
            mod_license             : mod_license,
            mod_name                : mod_name,
            mod_description         : mod_description,
            mod_url                 : mod_url,
            mod_issue_tracker       : mod_issue_tracker
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
sourceSets.main.resources.srcDir generateModMetadata
legacyForge.ideSyncTask generateModMetadata
